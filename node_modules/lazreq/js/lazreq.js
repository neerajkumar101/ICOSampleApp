// Generated by CoffeeScript 1.8.0
(function() {
  var find_module, lazreq, loaded, parse_stack, requested;

  parse_stack = null;

  loaded = {};

  requested = {};

  find_module = function(filename) {
    var modules, search;
    modules = {};
    search = function(nodes) {
      var node, resolved, _i, _len;
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        if (!(!modules[node.filename])) {
          continue;
        }
        if (filename === node.filename) {
          return node;
        }
        modules[node.filename] = node;
        if (node.children && (resolved = search(node.children))) {
          return resolved;
        }
      }
      return null;
    };
    return search([process.mainModule]);
  };

  lazreq = function(inf) {
    var caller_module, id_origin, name, ref, _fn;
    caller_module = null;
    id_origin = function() {
      var err, stack;
      if (!parse_stack) {
        parse_stack = require('parse-stack');
      }
      try {
        stack = parse_stack(new Error('fake'));
      } catch (_error) {
        err = _error;
        throw new Error('Standard node.js stack trace API support is required');
      }
      if (!(caller_module = find_module(stack[2].filepath))) {
        throw new Error('Could not identify caller module');
      }
    };
    _fn = function(name, ref) {
      return Object.defineProperty(requested, name, {
        configurable: false,
        enumerable: true,
        get: function() {
          if (!loaded.hasOwnProperty(name)) {
            loaded[name] = caller_module.require(ref);
          }
          return loaded[name];
        }
      });
    };
    for (name in inf) {
      ref = inf[name];
      if (!(!requested.hasOwnProperty(name))) {
        continue;
      }
      if (!caller_module) {
        id_origin();
      }
      _fn(name, ref);
    }
    return requested;
  };

  module.exports = lazreq;

}).call(this);
