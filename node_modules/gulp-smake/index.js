'use strict';

// Core
var cp = require('child_process');
var os = require('os');
var path = require('path');

// Imported
var fs = require('fs-extra'); // TODO used only for ensureDir atm. Maybe just go with fs.
var through = require('through2');
var gutil = require('gulp-util');

var PluginError = gutil.PluginError;

var solcFn = function (cmd, cwd, outputDir, callback) {
    var exec = cp.exec;
    cmd += ' -o ' + outputDir;
    exec(cmd, {cwd: cwd}, function (error, stdout) {
        callback(error, stdout);
    });
};

// file must be a vinyl file object.
// Will gradually replace fs sync methods with better alternatives.
exports.build = function (options, exports) {

    if (!options) {
        throw new PluginError('gulp-smake', 'Missing options for gulp-smake');
    }

    if (!options.root) {
        throw new PluginError('gulp-smake', 'Missing options.root for gulp-smake');
    }
    var root = path.resolve(options.root);

    var sourceRoot;
    var buildDir;

    if(exports && exports.base){
        sourceRoot = exports.base;
    } else {
        if (!options.sourceDir) {
            throw new PluginError('gulp-smake', 'Missing both options.sourceDir and exports.base for gulp-smake');
        }
        sourceRoot = path.join(root, options.sourceDir);
    }

    if (exports && exports.buildDir){
        buildDir = exports.buildDir;
    } else {
        if(!options.buildDir){
            throw new PluginError('gulp-smake', 'Missing output directory for gulp-smake');
        }
        buildDir = path.join(root, options.buildDir);
    }

    var latestFile;
    var sources = [];

    function runSolc(callback) {

        var solcName = "solc";
        var osName = os.platform();
        // If running from the command prompt or something.
        if (osName.indexOf('win') === 0) {
            solcName = solcName + '.exe';
        }
        var cmd = solcName + " ";

        if(options.compilerFlags){
            cmd += options.compilerFlags + " ";
        }

        var buildFlags = "";
        if(options.ast){
            buildFlags += "--ast ";
        }
        if(options["ast-json"]){
            buildFlags += "--ast-json ";
        }
        if(options.asm){
            buildFlags += "--asm ";
        }
        if(options["asm-json"]){
            buildFlags += "--asm-json ";
        }
        if(options.opcodes){
            buildFlags += "--opcodes ";
        }
        if(options.bin){
            buildFlags += "--bin ";
        }
        if(options["bin-runtime"]){
            buildFlags += "--bin-runtime ";
        }
        if(options["clone-bin"]){
            buildFlags += "--clone-bin ";
        }
        if(options.abi){
            buildFlags += "--abi ";
        }
        if(options.interface){
            buildFlags += "--interface ";
        }
        if(options.hashes){
            buildFlags += "--hashes ";
        }

        var files = "";
        for (var i = 0; i < sources.length; i++) {
            files += sources[i] + ' ';
        }
        var buildCmd = cmd + buildFlags + files;

        solcFn(buildCmd, sourceRoot, buildDir, function(error){
            if(error){
                callback(error);
                return;
            }
            if((options.docsDir || exports.docsDir ) && (options.userdoc || options.devdoc)){
                var docsDir;
                if(exports.docsDir){
                    docsDir = exports.docsDir;
                } else {
                    docsDir = path.join(root, options.docsDir);
                }
                var docsFlags = "";
                if(options.userdoc){
                    docsFlags += "--userdoc ";
                }
                if(options.devdoc){
                    docsFlags += "--devdoc ";
                }
                var docCmd = cmd + docsFlags + files;
                solcFn(docCmd, sourceRoot, docsDir, callback);
            }
        });
    }

    function bufferContents(file, enc, cb) {
        // ignore empty files
        if (file.isNull()) {
            gutil.log("Null file added to gulp-smake");
            cb();
            return;
        }

        // we don't do streams
        if (file.isStream()) {
            this.emit('error', new PluginError('gulp-smake', 'Streaming not supported'));
            cb();
            return;
        }

        // add file to concat instance
        latestFile = file;
        sources.push(file.relative);
        cb();
    }

    function endStream(cb) {
        // no files passed in, no file goes out
        if (!latestFile || !sources.length) {
            cb();
            return;
        }
        var that = this;
        runSolc(function (error) {
            fs.removeSync(sourceRoot);
            if (error) {
                that.emit('error', new PluginError('gulp-smake', 'Failed to compile solidity: ' + error));
            }
            cb();
        });
    }
    return through.obj(bufferContents, endStream);
};

exports.setSolcFn = function (solcFnIn) {
    solcFn = solcFnIn;
};
