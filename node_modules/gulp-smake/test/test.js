var os = require('os');
var should = require('should');
var fs = require('fs-extra');
var path = require('path');
var assert = require('stream-assert');
var File = require('gulp-util').File;
var gulp = require('gulp');
var gsm = require('../index');
var gsmMockSolc = require('../index');

gsmMockSolc.setSolcFn(function (cmd, cwd, outputDir, callback) {
    var dir = path.join(outputDir, "Test.bin");
    fs.writeFileSync(dir, "000000");
    callback(null, "done");
});

require('mocha');


describe('gulp-smake', function () {

    describe('gsm.build()', function () {

        it('should throw, when options arguments is missing', function () {
            (function () {
                gsm.build();
            }).should.throw('Missing options for gulp-smake');
        });

        it('should throw, when options.root is missing', function () {
            (function () {
                gsm.build({}, {});
            }).should.throw('Missing options.root for gulp-smake');
        });

        it('should throw, when there is neither an options.sourceDir or exports.base', function () {
            (function () {
                gsm.build({root: ".", buildDir: "build", docsDir: "docs", compilerFlags: "-"});
            }).should.throw('Missing both options.sourceDir and exports.base for gulp-smake');
        });

        it('should throw, when there is neither an options.buildDir or exports.buildDir', function () {
            (function () {
                gsm.build({root: ".", sourceDir: "src", docsDir: "docs", compilerFlags: "-"}, {});
            }).should.throw('Missing output directory for gulp-smake');
        });

        it('should ignore null files', function (done) {
            var stream = gsm.build({root: ".", buildDir: "build", docsDir: "docs", compilerFlags: "-"}, {base: "."});
            stream
                .pipe(assert.length(0))
                .pipe(assert.end(done));
            stream.write(new File());
            stream.end();
        });

        it('should write a test file', function (done) {
            // Copy file to temp folder first, to simulate a more complex build.
            var temp = path.join(os.tmpdir(), "soltemp");
            // Basic paths.
            var base = path.join(__dirname, "testdata");
            var srcPath = path.join(base, 'src');
            var buildPath = path.join(base, 'build');
            // Test contract + the version in temp.
            var testContract = path.join(srcPath, 'Test.sol');
            var testContractTemp = path.join(temp, "Test.sol");
            fs.ensureDirSync(temp);
            fs.copySync(testContract, testContractTemp);
            fs.emptyDirSync(buildPath);
            gulp.src(path.join(temp, '/**/*.sol'))
                .pipe(gsmMockSolc.build({
                    root: base,
                    sourceDir: "src",
                    buildDir: "build",
                    compilerFlags: "",
                    bin: true
                }, {base: temp}))
                .on('finish', function (err) {
                    var error;
                    try {
                        fs.readFileSync(path.join(buildPath, "Test.bin"));
                    } catch (err) {
                        error = err;
                    }
                    // Clear this before asserting.
                    fs.removeSync(buildPath);
                    should.ifError(error);
                    done();
                });
        });

    });

    describe('should not fail if no files were added', function () {

        it('when argument is a string', function (done) {
            var stream = gsm.build({root: ".", sourceDir: ".", buildDir: "build", docsDir: "docs", compilerFlags: "-"});
            stream.end();
            done();
        });

    });

});